#!/usr/bin/env node

/**
 * Manual script to create the 8 initial groups
 * This script creates groups with a placeholder admin that can be updated later
 * Requirements: 5.1, 5.2 - Create specified groups with proper metadata
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Supabase configuration
const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase configuration');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// The 8 initial groups to create
const INITIAL_GROUPS = [
  {
    name: '„Éî„Ç¢„É©„Éº„Éã„É≥„Ç∞„Éè„ÉñÁîüÊàêAIÈÉ®',
    description: 'ÁîüÊàêAIÊäÄË°ì„Å´„Å§„ÅÑ„Å¶Â≠¶„Å≥„ÄÅÂÆüË∑µÁöÑ„Å™„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Å´Âèñ„ÇäÁµÑ„ÇÄ„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Åß„Åô„ÄÇChatGPT„ÄÅClaude„ÄÅMidjourneyÁ≠â„ÅÆÊúÄÊñ∞AIÊäÄË°ì„ÇíÊ¥ªÁî®„Åó„ÅüÂ≠¶Áøí„Å®„Éá„Ç£„Çπ„Ç´„ÉÉ„Ç∑„Éß„É≥„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ',
    external_link: 'https://discord.gg/ai-learning-hub'
  },
  {
    name: '„Åï„Å¨„Åç„Éî„Ç¢„É©„Éº„Éã„É≥„Ç∞„Éè„Éñ„Ç¥„É´„ÉïÈÉ®',
    description: 'È¶ôÂ∑ùÁúåÂÜÖ„Åß„Ç¥„É´„Éï„ÇíÊ•Ω„Åó„Åø„Å™„Åå„Çâ„ÄÅ„Éç„ÉÉ„Éà„ÉØ„Éº„Ç≠„É≥„Ç∞„Å®Â≠¶Áøí„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„Åü„É¶„Éã„Éº„ÇØ„Å™„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Åß„Åô„ÄÇÂàùÂøÉËÄÖ„Åã„Çâ‰∏äÁ¥öËÄÖ„Åæ„ÅßÊ≠ìËøé„Åó„Åæ„Åô„ÄÇ',
    external_link: 'https://discord.gg/sanuki-golf-club'
  },
  {
    name: '„Åï„Å¨„Åç„Éî„Ç¢„É©„Éº„Éã„É≥„Ç∞„Éè„ÉñËã±Ë™ûÈÉ®',
    description: 'Ëã±Ë™ûÂ≠¶Áøí„ÇíÈÄö„Åò„Å¶ÂõΩÈöõÁöÑ„Å™Ë¶ñÈáé„ÇíÂ∫É„Åí„Çã„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Åß„Åô„ÄÇËã±‰ºöË©±Á∑¥Áøí„ÄÅTOEICÂØæÁ≠ñ„ÄÅ„Éì„Ç∏„Éç„ÇπËã±Ë™û„Å™„Å©Êßò„ÄÖ„Å™Â≠¶ÁøíÊ¥ªÂãï„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ',
    external_link: 'https://discord.gg/sanuki-english-club'
  },
  {
    name: 'WAOJE„Åï„Å¨„Åç„Éî„Ç¢„É©„Éº„Éã„É≥„Ç∞„Éè„Éñ‰∫§ÊµÅ‰ºöÂèÇÂä†ËÄÖ',
    description: 'WAOJEÔºàÂíåÂÉë‰ºöÔºâ„Å®„ÅÆÈÄ£Êê∫„Å´„Çà„ÇãÂõΩÈöõÁöÑ„Å™„Éì„Ç∏„Éç„Çπ‰∫§ÊµÅ‰ºö„ÅÆÂèÇÂä†ËÄÖ„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Åß„Åô„ÄÇ„Ç∞„É≠„Éº„Éê„É´„Å™„Éì„Ç∏„Éç„Çπ„Éç„ÉÉ„Éà„ÉØ„Éº„Ç≠„É≥„Ç∞„Å®Â≠¶ÁøíÊ©ü‰ºö„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ',
    external_link: 'https://discord.gg/waoje-sanuki-exchange'
  },
  {
    name: 'È¶ôÂ∑ù„Ç§„Éé„Éô„Éº„Ç∑„Éß„É≥„Éô„Éº„Çπ',
    description: 'È¶ôÂ∑ùÁúå„ÇíÊã†ÁÇπ„Å®„Åó„ÅüËµ∑Ê•≠ÂÆ∂„ÄÅ„Ç§„Éé„Éô„Éº„Çø„Éº„ÄÅ„ÇØ„É™„Ç®„Ç§„Çø„Éº„ÅÆ„Åü„ÇÅ„ÅÆ„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Åß„Åô„ÄÇÊñ∞„Åó„ÅÑ„Éì„Ç∏„Éç„Çπ„Ç¢„Ç§„Éá„Ç¢„ÅÆÂâµÂá∫„Å®ÂÆüÁèæ„Çí„Çµ„Éù„Éº„Éà„Åó„Åæ„Åô„ÄÇ',
    external_link: 'https://discord.gg/kagawa-innovation-base'
  },
  {
    name: '„Åï„Å¨„Åç„Éî„Ç¢„É©„Éº„Éã„É≥„Ç∞„Éè„ÉñÂ±Ö‰ΩèËÄÖ',
    description: '„Åï„Å¨„Åç„Éî„Ç¢„É©„Éº„Éã„É≥„Ç∞„Éè„Éñ„ÅÆÂ±Ö‰ΩèËÄÖÂ∞ÇÁî®„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Åß„Åô„ÄÇÂÖ±ÂêåÁîüÊ¥ª„ÇíÈÄö„Åò„ÅüÂ≠¶Áøí‰ΩìÈ®ì„Å®Êó•Â∏∏ÁöÑ„Å™ÊÉÖÂ†±ÂÖ±Êúâ„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ',
    external_link: 'https://discord.gg/sanuki-residents'
  },
  {
    name: 'Ëã±Ë™û„Ç≠„É£„É≥„ÉóÂçíÊ•≠ËÄÖ',
    description: 'Ëã±Ë™û„Ç≠„É£„É≥„Éó„Çí‰øÆ‰∫Ü„Åó„Åü„É°„É≥„Éê„Éº„ÅÆ„Ç¢„É´„É†„Éä„Ç§„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Åß„Åô„ÄÇÁ∂ôÁ∂öÁöÑ„Å™Ëã±Ë™ûÂ≠¶Áøí„Çµ„Éù„Éº„Éà„Å®ÂçíÊ•≠ÁîüÂêåÂ£´„ÅÆ„Éç„ÉÉ„Éà„ÉØ„Éº„Ç≠„É≥„Ç∞„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ',
    external_link: 'https://discord.gg/english-camp-alumni'
  }
];

/**
 * Find any existing user to use as creator, or use a placeholder
 */
async function findCreatorUser() {
  try {
    // Try to find any existing user
    const { data: profiles } = await supabase
      .from('profiles')
      .select('id, email, full_name')
      .eq('is_active', true)
      .limit(1);

    if (profiles && profiles.length > 0) {
      const user = profiles[0];
      console.log(`‚úì Using existing user as creator: ${user.email}`);
      return user.id;
    }

    // If no users exist, we'll need to use a placeholder that will be updated later
    console.log('‚ö† No users found. Groups will be created with placeholder creator.');
    console.log('  You can update the created_by field later when users are available.');
    
    // Use a well-known UUID that can be easily identified and updated later
    return '99999999-9999-9999-9999-999999999999'; // Placeholder UUID
  } catch (error) {
    console.error('Error finding creator user:', error);
    return '99999999-9999-9999-9999-999999999999'; // Fallback to placeholder
  }
}

/**
 * Create groups with retry logic and better error handling
 */
async function createGroupWithRetry(groupData, creatorUserId, maxRetries = 5) {
  let lastError;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`  Attempt ${attempt}/${maxRetries}...`);
      
      // First, check if group already exists
      const { data: existing } = await supabase
        .from('groups')
        .select('id, name')
        .eq('name', groupData.name)
        .eq('is_active', true)
        .single();

      if (existing) {
        console.log(`  ‚ö† Group "${groupData.name}" already exists`);
        return { ...existing, skipped: true };
      }

      // Create the group
      const { data, error } = await supabase
        .from('groups')
        .insert({
          name: groupData.name,
          description: groupData.description,
          external_link: groupData.external_link,
          created_by: creatorUserId
        })
        .select()
        .single();

      if (error) {
        throw error;
      }

      return data;
    } catch (error) {
      lastError = error;
      
      // Handle schema cache issues
      if (error.code === 'PGRST205' && attempt < maxRetries) {
        console.log(`  ‚è≥ Schema cache issue, waiting ${attempt * 2}s before retry...`);
        await new Promise(resolve => setTimeout(resolve, attempt * 2000));
        continue;
      }
      
      // Handle unique constraint violations
      if (error.code === '23505') {
        console.log(`  ‚ö† Group "${groupData.name}" already exists (unique constraint)`);
        return { name: groupData.name, skipped: true };
      }
      
      // Handle foreign key constraint (invalid creator)
      if (error.code === '23503') {
        console.log(`  ‚ö† Invalid creator user ID, this will need to be updated later`);
        // Continue with the error for now, but note it
      }
      
      break;
    }
  }
  
  throw lastError;
}

/**
 * Validate groups table accessibility
 */
async function validateGroupsTable() {
  try {
    console.log('üîç Validating groups table...');
    
    const { error } = await supabase
      .from('groups')
      .select('count', { count: 'exact', head: true });

    if (error) {
      console.error('‚ùå Groups table is not accessible:', error.message);
      console.log('üí° Please ensure the database migrations have been run:');
      console.log('   npm run migrate');
      return false;
    }

    console.log('‚úì Groups table is accessible');
    return true;
  } catch (error) {
    console.error('‚ùå Error validating groups table:', error);
    return false;
  }
}

/**
 * Main function
 */
async function main() {
  console.log('üöÄ Creating initial groups for PeerLearningHub...\n');

  // Validate groups table
  const tableValid = await validateGroupsTable();
  if (!tableValid) {
    process.exit(1);
  }

  // Find creator user
  const creatorUserId = await findCreatorUser();

  const results = {
    created: [],
    skipped: [],
    errors: []
  };

  console.log(`\nüìù Creating ${INITIAL_GROUPS.length} groups...\n`);

  // Create groups one by one
  for (let i = 0; i < INITIAL_GROUPS.length; i++) {
    const groupData = INITIAL_GROUPS[i];
    
    console.log(`[${i + 1}/${INITIAL_GROUPS.length}] Creating: ${groupData.name}`);
    
    try {
      const result = await createGroupWithRetry(groupData, creatorUserId);
      
      if (result.skipped) {
        results.skipped.push(result);
        console.log(`  ‚úì Skipped (already exists)\n`);
      } else {
        results.created.push(result);
        console.log(`  ‚úÖ Created successfully\n`);
      }
    } catch (error) {
      const errorMessage = `${groupData.name}: ${error.message}`;
      results.errors.push(errorMessage);
      console.error(`  ‚ùå Failed: ${error.message}\n`);
    }
  }

  // Print detailed summary
  console.log('='.repeat(70));
  console.log('üìä CREATION SUMMARY');
  console.log('='.repeat(70));
  
  console.log(`‚úÖ Successfully created: ${results.created.length} groups`);
  console.log(`‚è≠ Already existed: ${results.skipped.length} groups`);
  console.log(`‚ùå Failed: ${results.errors.length} groups`);
  
  if (results.created.length > 0) {
    console.log('\nüìù Successfully created groups:');
    results.created.forEach((g, i) => console.log(`   ${i + 1}. ${g.name}`));
  }
  
  if (results.skipped.length > 0) {
    console.log('\n‚è≠ Skipped (already existed):');
    results.skipped.forEach((g, i) => console.log(`   ${i + 1}. ${g.name}`));
  }
  
  if (results.errors.length > 0) {
    console.log('\n‚ùå Failed to create:');
    results.errors.forEach((error, i) => console.log(`   ${i + 1}. ${error}`));
  }

  const totalSuccess = results.created.length + results.skipped.length;
  const totalExpected = INITIAL_GROUPS.length;
  
  console.log(`\nüìà Overall status: ${totalSuccess}/${totalExpected} groups are available`);

  if (creatorUserId === '99999999-9999-9999-9999-999999999999') {
    console.log('\n‚ö† IMPORTANT: Groups were created with a placeholder creator.');
    console.log('   You should update the created_by field when real users are available.');
    console.log('   Run this SQL when you have admin users:');
    console.log('   UPDATE groups SET created_by = \'<real-admin-user-id>\' WHERE created_by = \'99999999-9999-9999-9999-999999999999\';');
  }

  if (totalSuccess === totalExpected) {
    console.log('\nüéâ All initial groups are now set up successfully!');
    process.exit(0);
  } else if (results.created.length > 0) {
    console.log('\n‚úÖ Some groups were created successfully.');
    process.exit(0);
  } else {
    console.log('\n‚ö† No new groups could be created.');
    process.exit(1);
  }
}

// Run the script
main().catch(error => {
  console.error('\nüí• Script failed:', error);
  process.exit(1);
});