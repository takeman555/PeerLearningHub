name: Test Automation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false --testPathPattern="test\.(js|ts)$"
        
      - name: Generate test report
        run: |
          npm test -- --coverage --watchAll=false --reporters=default --reporters=jest-junit
        env:
          JEST_JUNIT_OUTPUT_DIR: ./test-results
          JEST_JUNIT_OUTPUT_NAME: unit-tests.xml
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            ./test-results/
            ./coverage/
          retention-days: 30
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: unit-tests-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup test environment
        run: |
          echo "SUPABASE_URL=http://localhost:54321" >> .env.test
          echo "SUPABASE_ANON_KEY=test-key" >> .env.test
          echo "NODE_ENV=test" >> .env.test
          
      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          
      - name: Generate integration test report
        run: |
          npm run test:integration -- --reporters=jest-junit
        env:
          JEST_JUNIT_OUTPUT_DIR: ./test-results
          JEST_JUNIT_OUTPUT_NAME: integration-tests.xml
          
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: ./test-results/
          retention-days: 30

  functional-tests:
    name: Functional Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run functional tests
        run: npm run test:functional
        
      - name: Run authentication tests
        run: npm run test:auth
        
      - name: Run community tests
        run: npm run test:community
        
      - name: Run membership tests
        run: npm run test:membership
        
      - name: Run external systems tests
        run: npm run test:external
        
      - name: Generate functional test report
        run: |
          npm run test:all-functional -- --reporters=jest-junit
        env:
          JEST_JUNIT_OUTPUT_DIR: ./test-results
          JEST_JUNIT_OUTPUT_NAME: functional-tests.xml
          
      - name: Upload functional test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: functional-test-results
          path: ./test-results/
          retention-days: 30

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run performance tests
        run: npm run test:performance
        
      - name: Generate performance report
        run: |
          npm run test:performance -- --reporters=jest-junit
        env:
          JEST_JUNIT_OUTPUT_DIR: ./test-results
          JEST_JUNIT_OUTPUT_NAME: performance-tests.xml
          
      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: ./test-results/
          retention-days: 30

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security tests
        run: npm run test:security
        
      - name: Run dependency audit
        run: npm audit --audit-level moderate
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json > snyk-results.json
          
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            snyk-results.json
            ./test-results/
          retention-days: 30

  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, functional-tests, performance-tests, security-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: ./all-test-results/
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate comprehensive test report
        run: node scripts/generateTestReport.js
        
      - name: Upload comprehensive test report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-report
          path: |
            ./test-report.html
            ./test-summary.json
          retention-days: 90
          
      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const testSummary = JSON.parse(fs.readFileSync('./test-summary.json', 'utf8'));
            
            const comment = `
            ## ðŸ§ª Test Results Summary
            
            | Test Suite | Status | Tests | Passed | Failed | Coverage |
            |------------|--------|-------|--------|--------|----------|
            | Unit Tests | ${testSummary.unit.status} | ${testSummary.unit.total} | ${testSummary.unit.passed} | ${testSummary.unit.failed} | ${testSummary.unit.coverage}% |
            | Integration Tests | ${testSummary.integration.status} | ${testSummary.integration.total} | ${testSummary.integration.passed} | ${testSummary.integration.failed} | - |
            | Functional Tests | ${testSummary.functional.status} | ${testSummary.functional.total} | ${testSummary.functional.passed} | ${testSummary.functional.failed} | - |
            | Performance Tests | ${testSummary.performance.status} | ${testSummary.performance.total} | ${testSummary.performance.passed} | ${testSummary.performance.failed} | - |
            | Security Tests | ${testSummary.security.status} | ${testSummary.security.total} | ${testSummary.security.passed} | ${testSummary.security.failed} | - |
            
            **Overall Status**: ${testSummary.overall.status}
            **Total Coverage**: ${testSummary.overall.coverage}%
            
            [View detailed report](${testSummary.reportUrl})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  notify-test-results:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: [test-report]
    if: always()
    
    steps:
      - name: Download test summary
        uses: actions/download-artifact@v4
        with:
          name: comprehensive-test-report
          path: ./
          
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "Test Results for PeerLearningHub",
              "attachments": [
                {
                  "color": "${{ needs.test-report.result == 'success' && 'good' || 'danger' }}",
                  "fields": [
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ github.sha }}",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "${{ needs.test-report.result }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()